// [PackageDev] target_format: plist, ext: tmLanguage
{
    "name": "XPP ODE",
    "scopeName": "source.xpp",
    "fileTypes": ["ode"],
    "uuid": "443580d1-b8be-431d-aa89-2fd08b5f7853",
    "patterns": [
        {
            "include": "#keywords"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#constant"
        }
    ],
    "repository": {
        "variable": {
            "patterns": [
                {
                    "name": "variable.language.derivative.xpp",
                    "match": "\\b((d[a-zA-Z]+\\/dt))\\b"
                },
                {
                    "name": "variable.language.derivative.variate.xpp",
                    "match": "^[a-zA-Z_]+'"
                }
            ]
        },
        "keywords": {
            "patterns": [{
                "name": "keyword.xpp",
                "match": "\\b^([pbviawntgm][a-z]*)\\b"
            },
            {
                "name": "keyword.operator.xpp",
                "match": "[\\*\\^\\+\\-\\/]"
            },
            {
                "name": "keyword.control.conditional.xpp",
                "match": "(?<![a-zA-Z0-9])(if|only|else|then|set|done)(?![a-zA-Z0-9])"
            },
            {
                "name": "keywork.other.xpp",
                "match": "(?<![a-zA-Z0-9])(OUTPUT|XP|YP|ZP|MAXSTOR|BACK|SMALL|BIG|AXES|TOTAL|DT(MAX|MIN)?|NJMP|T0|TRANS|NMESH|METH|TOLER|BOUND|DELAY|[XY](LO|HI)|[XYZ](MAX|MIN))(?![a-zA-Z0-9])"
            },
            {
                "name": "keyword.other.reservedFunctions.xpp",
                "match": "(?<![a-zA-Z0-9])(heav|sign|ran|besselj|bessely|erf|exp|erfc|normal|max|delay|ceil|sum|of|sin|cos|tan|sinh|cosh|tanh)(?![a-zA-Z0-9])"
            }]
        },
        "strings": {
            "name": "string.quoted.double.xpp",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.xpp",
                    "match": "\\\\."
                }
            ]
        },
        "comment":{
            "patterns": [
                {
                    "name": "comment.line.xpp",
                    "match": "#.*"
                },
                {
                    "name":"comment.line.number-sign.xpp",
                    "match":"#"
                }
            ]
        },
        "constant":{
            "patterns":[
                {
                    "name": "constant.numeric.float.xpp",
                    "match": "\\b([0-9]+)?\\.[0-9]+\\b"
                },
                {
                    "name":"constant.numeric.integer.xpp",
                    "match": "\\b[0-9]+\\b"
                },
                {
                    "name":"constant.language",
                    "match":"(?<![a-zA-Z])(pi|t)(?![a-zA-Z])"
                }
            ]
        }
    }
}
